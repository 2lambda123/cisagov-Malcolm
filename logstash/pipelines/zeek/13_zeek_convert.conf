filter {

  # set data types for fields that belong to various zeek logs
  mutate {
    id => "mutate_convert_zeek_bulk"
    convert => {
      "[zeek_dce_rpc][rtt]" => "float"
      "[zeek_dns][rtt]" => "float"
      "[zeek_ldap][message_id]" => "integer"
      "[zeek_ldap][result_code]" => "integer"
      "[zeek_modbus_register][delta]" => "float"
      "[zeek_modbus_register][new_val]" => "integer"
      "[zeek_modbus_register][old_val]" => "integer"
      "[zeek_modbus_register][register]" => "integer"
      "[zeek_mqtt_publish][payload_len]" => "integer"
      "[zeek_mqtt_subscribe][granted_qos_level]" => "integer"
      "[zeek_mqtt_subscribe][qos_levels]" => "integer"
      "[zeek_ntp][mode]" => "integer"
      "[zeek_ntp][num_exts]" => "float"
      "[zeek_ntp][poll]" => "float"
      "[zeek_ntp][precision]" => "float"
      "[zeek_ntp][root_delay]" => "float"
      "[zeek_ntp][root_disp]" => "float"
      "[zeek_ntp][version]" => "integer"
      "[zeek_s7comm][item_count]" => "integer"
      "[zeek_signatures][host_count]" => "integer"
      "[zeek_signatures][signature_count]" => "integer"
      "[zeek_smb_cmd][rtt]" => "float"
      "[zeek_smb_files][data_len_req]" => "integer"
      "[zeek_smb_files][data_len_rsp]" => "integer"
      "[zeek_smb_files][data_offset_req]" => "integer"
    }
  }

}
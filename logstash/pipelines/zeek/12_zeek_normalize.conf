filter {

  # Protocol/service version ##########################################################################################
  # collect protocol version under the parent zeek.service_version array

  if ([zeek_gquic][version])                    { mutate { id => "mutate_merge_normalize_zeek_gquic_version"
                                                           merge => { "[zeek][service_version]" => "[zeek_gquic][version]" } } }

  if ([zeek_http][version])                     { mutate { id => "mutate_merge_normalize_zeek_http_version"
                                                           merge => { "[zeek][service_version]" => "[zeek_http][version]" } } }

  if ([zeek_ntp][version])                      { mutate { id => "mutate_merge_normalize_zeek_ntp_version"
                                                           merge => { "[zeek][service_version]" => "[zeek_ntp][version]" } } }

  if ([zeek_profinet][block_version])           { mutate { id => "mutate_merge_normalize_zeek_profinet_block_version"
                                                           merge => { "[zeek][service_version]" => "[zeek_profinet][block_version]" } } }

  if ([zeek_profinet_dce_rpc][version])         { mutate { id => "mutate_merge_normalize_zeek_profinet_dce_rpc_version"
                                                           merge => { "[zeek][service_version]" => "[zeek_profinet_dce_rpc][version]" } } }

  if ([zeek_rfb]) {
    ruby {
      id => "ruby_zeek_field_zeek_service_version_rfb"
      code => '
        versions = Array.new
        clientMajorVersion = event.get("[zeek_rfb][client_major_version]").sub!(/^0*/, "")
        clientMinorVersion = event.get("[zeek_rfb][client_minor_version]").sub!(/^0*/, "")
        serverMajorVersion = event.get("[zeek_rfb][server_major_version]").sub!(/^0*/, "")
        serverMinorVersion = event.get("[zeek_rfb][server_minor_version]").sub!(/^0*/, "")
        if clientMajorVersion then
          versions << [clientMajorVersion, clientMinorVersion].join(".")
        end
        if serverMajorVersion then
          versions << [serverMajorVersion, serverMinorVersion].join(".")
        end
        event.set("[zeek][service_version]", versions.uniq)'
    }
  }

  if ([zeek_rdp][client_build])                 { mutate { id => "mutate_merge_normalize_zeek_rdp_client_build"
                                                           merge => { "[zeek][service_version]" => "[zeek_rdp][client_build]" } } }

  if ([zeek_sip][version])                      { mutate { id => "mutate_merge_normalize_zeek_sip_version"
                                                           merge => { "[zeek][service_version]" => "[zeek_sip][version]" } } }

  if ([zeek_smb_cmd][version])                  { mutate { id => "mutate_merge_normalize_zeek_smb_cmd_version"
                                                           merge => { "[zeek][service_version]" => "[zeek_smb_cmd][version]" } } }

  if ([zeek_snmp][version])                     { mutate { id => "mutate_merge_normalize_zeek_snmp_version"
                                                           merge => { "[zeek][service_version]" => "[zeek_snmp][version]" } } }

  if ([zeek_socks][version])                    { mutate { id => "mutate_merge_normalize_zeek_socks_version"
                                                           merge => { "[zeek][service_version]" => "[zeek_socks][version]" } } }

  if ([zeek_ssh][version])                      { mutate { id => "mutate_merge_normalize_zeek_ssh_version"
                                                           merge => { "[zeek][service_version]" => "[zeek_ssh][version]" } } }

  if ([zeek_ssl][ssl_version])                  { mutate { id => "mutate_merge_normalize_zeek_ssl_ssl_version"
                                                           merge => { "[zeek][service_version]" => "[zeek_ssl][ssl_version]" } } }

  if ([zeek][service_version]) {
    ruby {
      id => "ruby_zeek_service_version_uniq"
      code => "event.set('[zeek][service_version]', event.get('[zeek][service_version]').uniq)"
    }
  }

  # Action ############################################################################################################
  # collect all actions/operations/commands under the parent [zeek][action] array

  if ([zeek_bacnet][service_choice])            { mutate { id => "mutate_merge_normalize_zeek_bacnet_service_choice"
                                                           merge => { "[zeek][action]" => "[zeek_bacnet][service_choice]" } } }

  if ([zeek_cip][cip_service])                  { mutate { id => "mutate_merge_normalize_zeek_cip_cip_service"
                                                           merge => { "[zeek][action]" => "[zeek_cip][cip_service]" } } }

  if ([zeek_dce_rpc][operation])                { mutate { id => "mutate_merge_normalize_zeek_dce_rpc_operation"
                                                           merge => { "[zeek][action]" => "[zeek_dce_rpc][operation]" } } }

  if ([zeek_dnp3][fc_request])                  { mutate { id => "mutate_merge_normalize_zeek_dnp3_fc_request"
                                                           merge => { "[zeek][action]" => "[zeek_dnp3][fc_request]" } } }

  if ([zeek_enip][command])                     { mutate { id => "mutate_merge_normalize_zeek_enip_command"
                                                           merge => { "[zeek][action]" => "[zeek_enip][command]" } } }

  if ([zeek_ftp][command])                      { mutate { id => "mutate_merge_normalize_zeek_ftp_command"
                                                           merge => { "[zeek][action]" => "[zeek_ftp][command]" } } }

  if ([zeek_http][method])                      { mutate { id => "mutate_merge_normalize_zeek_http_method"
                                                           merge => { "[zeek][action]" => "[zeek_http][method]" } } }

  if ([zeek_irc][command])                      { mutate { id => "mutate_merge_normalize_zeek_irc_command"
                                                           merge => { "[zeek][action]" => "[zeek_irc][command]" } } }

  if ([zeek_iso_cotp][pdu_type])                { mutate { id => "mutate_merge_normalize_zeek_iso_cotp_pdu_type"
                                                           merge => { "[zeek][action]" => "[zeek_iso_cotp][pdu_type]" } } }

  if ([zeek_kerberos][request_type])            { mutate { id => "mutate_merge_normalize_zeek_kerberos_request_type"
                                                           merge => { "[zeek][action]" => "[zeek_kerberos][request_type]" } } }

  if ([zeek_ldap][operation])                   { mutate { id => "mutate_merge_normalize_zeek_ldap_operation"
                                                           merge => { "[zeek][action]" => "[zeek_ldap][operation]" } } }

  if ([zeek_modbus][func])                      { mutate { id => "mutate_merge_normalize_zeek_modbus_func"
                                                           merge => { "[zeek][action]" => "[zeek_modbus][func]" } } }

  if ([zeek_mqtt_publish][payload_dict][messageType]) {
    # not sure if this is a standard or just the PCAPs I found :/
    mutate { id => "mutate_merge_normalize_zeek_mqtt_publish_payload_dict_messageType"
    merge => { "[zeek][action]" => "[zeek_mqtt_publish][payload_dict][messageType]" } }
  }

  if ([zeek_mqtt_subscribe][action])            { mutate { id => "mutate_merge_normalize_zeek_mqtt_subscribe_action"
                                                           merge => { "[zeek][action]" => "[zeek_mqtt_subscribe][action]" } } }

  if ([zeek_mysql][cmd])                        { mutate { id => "mutate_merge_normalize_zeek_mysql_cmd"
                                                           merge => { "[zeek][action]" => "[zeek_mysql][cmd]" } } }

  if ([zeek_ntp][mode_str])                     { mutate { id => "mutate_merge_normalize_zeek_ntp_mode_str"
                                                           merge => { "[zeek][action]" => "[zeek_ntp][mode_str]" } } }

  if ([zeek_profinet][operation_type])          { mutate { id => "mutate_merge_normalize_zeek_profinet_operation_type"
                                                           merge => { "[zeek][action]" => "[zeek_profinet][operation_type]" } } }

  if ([zeek_profinet_dce_rpc][operation])       { mutate { id => "mutate_merge_normalize_zeek_profinet_dce_rpc_operation"
                                                           merge => { "[zeek][action]" => "[zeek_profinet_dce_rpc][operation]" } } }

  if ([zeek_s7comm]) {
    ruby {
      # action = rosctr:mode:type:sub
      id => "ruby_zeek_s7comm_generate_action"
      code => "
        actions = Array.new unless (actions = event.get('[zeek][action]'))
        actions.append([event.get('[zeek_s7comm][rosctr]'),
                        event.get('[zeek_s7comm][parameters][mode]'),
                        event.get('[zeek_s7comm][parameters][type]'),
                        event.get('[zeek_s7comm][parameters][sub]')].compact.join(':'))
        event.set('[zeek][action]', actions)"
    }
  }

  if ([zeek_smb_cmd]) {
    ruby {
      # action = command:sub_command
      id => "ruby_zeek_smb_cmd_generate_action"
      code => "
        actions = Array.new unless (actions = event.get('[zeek][action]'))
        actions.append([event.get('[zeek_smb_cmd][command]'),
                        event.get('[zeek_smb_cmd][sub_command]')].compact.join(':'))
        event.set('[zeek][action]', actions)"
    }
  }

  if ([zeek_smb_files][action])                 { mutate { id => "mutate_merge_normalize_zeek_smb_files_action"
                                                           merge => { "[zeek][action]" => "[zeek_smb_files][action]" } } }

  if ([zeek_sip][method])                       { mutate { id => "mutate_merge_normalize_zeek_sip_method"
                                                           merge => { "[zeek][action]" => "[zeek_sip][method]" } } }

  if ([zeek_tds][command])                      { mutate { id => "mutate_merge_normalize_zeek_tds_command"
                                                           merge => { "[zeek][action]" => "[zeek_tds][command]" } } }

  if ([zeek_tds_rpc][procedure_name]) {

    mutate { id => "mutate_add_field_zeek_tds_rpc_procedure_name_tmp"
             add_field => { "[@metadata][zeek_tds_rpc_procedure_name_tmp]" => "%{[zeek_tds_rpc][procedure_name]}" } }

    # remove everything after the first $
    mutate { id => "mutate_gsub_field_zeek_tds_rpc_procedure_name_tmp"
             gsub => [ "[@metadata][zeek_tds_rpc_procedure_name_tmp]", "\$.*", "" ] }

    mutate { id => "mutate_merge_normalize_zeek_tds_rpc_procedure_name"
             merge => { "[zeek][action]" => "[@metadata][zeek_tds_rpc_procedure_name_tmp]" } }
  }


  if ([zeek_tunnel][action])                    { mutate { id => "mutate_merge_normalize_zeek_tunnel_action"
                                                           merge => { "[zeek][action]" => "[zeek_tunnel][action]" } } }

  if ([zeek][action]) {
    ruby {
      id => "ruby_zeek_action_uniq"
      code => "event.set('[zeek][action]', event.get('[zeek][action]').uniq)"
    }
  }

  # FUIDs #############################################################################################################
  # collect all other FUIDs under parent [zeek][fuid] array (some were already done at the root level in
  # the "rename" in 11_zeek_logs.conf)

  if ([zeek_files][parent_fuid])                { mutate { id => "mutate_merge_normalize_zeek_files_parent_fuid"
                                                           merge => { "[zeek][fuid]" => "[zeek_files][parent_fuid]" } } }

  if ([zeek_http][orig_fuids])                  { mutate { id => "mutate_merge_normalize_zeek_http_orig_fuids"
                                                           merge => { "[zeek][fuid]" => "[zeek_http][orig_fuids]" } } }

  if ([zeek_http][resp_fuids])                  { mutate { id => "mutate_merge_normalize_zeek_http_resp_fuids"
                                                           merge => { "[zeek][fuid]" => "[zeek_http][resp_fuids]" } } }

  if ([zeek_kerberos][client_cert_fuid])        { mutate { id => "mutate_merge_normalize_zeek_kerberos_client_cert_fuid"
                                                           merge => { "[zeek][fuid]" => "[zeek_kerberos][client_cert_fuid]" } } }

  if ([zeek_kerberos][server_cert_fuid])        { mutate { id => "mutate_merge_normalize_zeek_kerberos_server_cert_fuid"
                                                           merge => { "[zeek][fuid]" => "[zeek_kerberos][server_cert_fuid]" } } }

  if ([zeek_ssl][cert_chain_fuids])             { mutate { id => "mutate_merge_normalize_zeek_ssl_cert_chain_fuids"
                                                           merge => { "[zeek][fuid]" => "[zeek_ssl][cert_chain_fuids]" } } }

  if ([zeek_ssl][client_cert_chain_fuids])      { mutate { id => "mutate_merge_normalize_zeek_ssl_client_cert_chain_fuids"
                                                           merge => { "[zeek][fuid]" => "[zeek_ssl][client_cert_chain_fuids]" } } }

  if ([zeek][fuid]) {
    ruby {
      id => "ruby_zeek_fuid_uniq"
      code => "event.set('[zeek][fuid]', event.get('[zeek][fuid]').uniq)"
    }
  }

  # File/MIME types ###################################################################################################
  # collect all file/MIME types under the parent [zeek][filetype] array

  if ([zeek_files][mime_type])                  { mutate { id => "mutate_merge_normalize_zeek_files_mime_type"
                                                           merge => { "[zeek][filetype]" => "[zeek_files][mime_type]" } } }

  if ([zeek_ftp][mime_type])                    { mutate { id => "mutate_merge_normalize_zeek_ftp_mime_type"
                                                           merge => { "[zeek][filetype]" => "[zeek_ftp][mime_type]" } } }

  if ([zeek_http][orig_mime_types])             { mutate { id => "mutate_merge_normalize_zeek_http_orig_mime_types"
                                                           merge => { "[zeek][filetype]" => "[zeek_http][orig_mime_types]" } } }

  if ([zeek_http][resp_mime_types])             { mutate { id => "mutate_merge_normalize_zeek_http_resp_mime_types"
                                                           merge => { "[zeek][filetype]" => "[zeek_http][resp_mime_types]" } } }

  if ([zeek_irc][dcc_mime_type])                { mutate { id => "mutate_merge_normalize_zeek_irc_dcc_mime_type"
                                                           merge => { "[zeek][filetype]" => "[zeek_irc][dcc_mime_type]" } } }

  if ([zeek_intel][file_mime_type])             { mutate { id => "mutate_merge_normalize_zeek_intel_file_mime_type"
                                                           merge => { "[zeek][filetype]" => "[zeek_intel][file_mime_type]" } } }

  if ([zeek_notice][file_mime_type])            { mutate { id => "mutate_merge_normalize_zeek_notice_file_mime_type"
                                                           merge => { "[zeek][filetype]" => "[zeek_notice][file_mime_type]" } } }

  if ([zeek_sip][content_type])                 { mutate { id => "mutate_merge_normalize_zeek_sip_content_type"
                                                           merge => { "[zeek][filetype]" => "[zeek_sip][content_type]" } } }

  if ([zeek][filetype]) {
    ruby {
      id => "ruby_zeek_filetype_uniq"
      code => "event.set('[zeek][filetype]', event.get('[zeek][filetype]').uniq)"
    }
  }

  # Filenames #########################################################################################################
  # collect all filenames under the parent [zeek][filename] array

  if ([zeek_files][filename])                   { mutate { id => "mutate_merge_normalize_zeek_files_filename"
                                                           merge => { "[zeek][filename]" => "[zeek_files][filename]" } } }

  if ([zeek_http][orig_filenames])              { mutate { id => "mutate_merge_normalize_zeek_http_orig_filenames"
                                                           merge => { "[zeek][filename]" => "[zeek_http][orig_filenames]" } } }

  if ([zeek_http][resp_filenames])              { mutate { id => "mutate_merge_normalize_zeek_http_resp_filenames"
                                                           merge => { "[zeek][filename]" => "[zeek_http][resp_filenames]" } } }

  if ([zeek_irc][dcc_file_name])                { mutate { id => "mutate_merge_normalize_zeek_irc_dcc_file_name"
                                                           merge => { "[zeek][filename]" => "[zeek_irc][dcc_file_name]" } } }

  if ([zeek_smb_files][name])                   { mutate { id => "mutate_merge_normalize_zeek_smb_files_name"
                                                           merge => { "[zeek][filename]" => "[zeek_smb_files][name]" } } }

  if ([zeek_smb_files][prev_name])              { mutate { id => "mutate_merge_normalize_zeek_smb_files_prev_name"
                                                           merge => { "[zeek][filename]" => "[zeek_smb_files][prev_name]" } } }

  if ([zeek][filename]) {
    ruby {
      id => "ruby_zeek_filename_uniq"
      code => "event.set('[zeek][filename]', event.get('[zeek][filename]').uniq)"
    }
  }

}
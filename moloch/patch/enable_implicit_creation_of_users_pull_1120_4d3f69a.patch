From 4d3f69aff152d7f44bbed677ea0473e94db3c254 Mon Sep 17 00:00:00 2001
From: Scott Schenkein <schenksj@yahoo.com>
Date: Mon, 8 Jul 2019 16:01:37 -0400
Subject: [PATCH] Merge of header authorization and implicit user creation

---
 viewer/viewer.js | 44 +++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 43 insertions(+), 1 deletion(-)

diff --git a/viewer/viewer.js b/viewer/viewer.js
index 54c11a52..955d0aca 100644
--- a/viewer/viewer.js
+++ b/viewer/viewer.js
@@ -65,6 +65,9 @@ var internals = {
   elasticBase: Config.get("elasticsearch", "http://localhost:9200").split(","),
   esQueryTimeout: Config.get("elasticsearchTimeout", 300) + 's',
   userNameHeader: Config.get("userNameHeader"),
+  requiredAuthHeader: Config.get("requiredAuthHeader"),
+  requiredAuthHeaderVal: Config.get("requiredAuthHeaderVal"),
+  userAutoCreateTmpl: Config.get("userAutoCreateTmpl"),
   httpAgent:   new http.Agent({keepAlive: true, keepAliveMsecs:5000, maxSockets: 40}),
   httpsAgent:  new https.Agent({keepAlive: true, keepAliveMsecs:5000, maxSockets: 40, rejectUnauthorized: !Config.insecure}),
   previousNodesStats: [],
@@ -280,8 +283,26 @@ if (Config.get("passwordSecret")) {
     // Header auth
     if (internals.userNameHeader !== undefined) {
       if (req.headers[internals.userNameHeader] !== undefined) {
+        // Check if we require a certain header+value to be present
+        // as in the case of an apache plugin that sends AD groups
+        if (internals.requiredAuthHeader !== undefined && internals.requiredAuthHeaderVal !== undefined) {
+          var authHeader = req.headers[internals.requiredAuthHeader];
+          if (authHeader === undefined) {
+             return res.send("Missing authorization header");
+          }
+          var authorized = false;
+          authHeader.split(",").forEach(headerVal => {
+             if (headerVal.trim() == internals.requiredAuthHeaderVal) {
+                authorized = true;
+             }
+          });
+          if (!authorized) {
+              return res.send("Not authorized");
+          }
+        }
         var userName = req.headers[internals.userNameHeader];
-        Db.getUserCache(userName, function(err, suser) {
+
+        function ucb(err, suser) {
           if (err) {return res.send("ERROR - getUser - user: " + userName + " err:" + err);}
           if (!suser || !suser.found) {return res.send(userName + " doesn't exist");}
           if (!suser._source.enabled) {return res.send(userName + " not enabled");}
@@ -290,6 +311,26 @@ if (Config.get("passwordSecret")) {
           userCleanup(suser._source);
           req.user = suser._source;
           return next();
+        };
+
+        Db.getUserCache(userName, function(err, suser) {
+          if (internals.userAutoCreateTmpl === undefined) {
+             return ucb(err, suser);
+          } else if ((err && err.toString().includes("Not Found")) ||
+                     (!suser || !suser.found)) { // Try dynamic creation
+             var nuser = JSON.parse(new Function("return `" +
+                   internals.userAutoCreateTmpl + "`;").call(req.headers));
+             Db.setUser(userName, nuser, (err, info) => {
+               if (err) {
+                 console.log("Elastic search error adding user: (" +  userName + "):(" + JSON.stringify(nuser) + "):" + err);
+               } else {
+                 console.log("Added user:" + userName + ":" + JSON.stringify(nuser));
+               }
+               return Db.getUserCache(userName, ucb);
+             });
+          } else {
+             return ucb(err, suser);
+          }
         });
         return;
       } else if (Config.debug) {
@@ -297,6 +338,7 @@ if (Config.get("passwordSecret")) {
       }
     }
 
+
     // Browser auth
     req.url = req.url.replace("/", Config.basePath());
     passport.authenticate('digest', {session: false})(req, res, function (err) {
-- 
2.20.1

